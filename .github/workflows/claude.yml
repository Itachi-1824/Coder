name: Claude Code
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Prepare Environment
        run: |
          curl -fsSL https://bun.sh/install | bash
          mkdir -p $HOME/.claude-code-router
          cat << 'EOF' > $HOME/.claude-code-router/config.json
          {
            "log": true,
            "NON_INTERACTIVE_MODE": true,
            "API_TIMEOUT_MS": 600000,
            "Providers": [
              {
                "name": "openai",
                "api_base_url": "https://text.pollinations.ai/openai",
                "api_key": "${{ secrets.OPENAI_API_KEY }}",
                "models": ["deepseek"]
              }
            ],
            "Router": {
              "default": "openai,deepseek"
            }
          }
          EOF
        shell: bash
      
      - name: Start Claude Code Router
        run: |
          echo "Config file contents:"
          cat $HOME/.claude-code-router/config.json
          echo ""
          echo "Starting router..."
          ~/.bun/bin/bunx @musistudio/claude-code-router@latest start > /tmp/router.log 2>&1 &
          ROUTER_PID=$!
          echo "Router PID: $ROUTER_PID"
          
          sleep 5
          echo "Router logs after 5 seconds:"
          cat /tmp/router.log
          echo ""
          
          echo "Waiting for router to become ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3456/health > /dev/null 2>&1; then
              echo "✅ Router health check passed!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Router failed health check after 30 seconds"
              echo "Final router logs:"
              cat /tmp/router.log
              echo ""
              echo "Router process status:"
              ps aux | grep -i router || echo "No router process found"
              echo ""
              echo "Port 3456 status:"
              netstat -tlnp | grep 3456 || echo "Port 3456 not listening"
              exit 1
            fi
            sleep 1
          done
          
          if ! kill -0 $ROUTER_PID 2>/dev/null; then
            echo "❌ Router process died"
            echo "Final router logs:"
            cat /tmp/router.log
            exit 1
          fi
          
          echo "✅ Router is running with PID: $ROUTER_PID"
          echo ""
          echo "Testing router with sample request..."
          TEST_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost:3456/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: test" \
            -d '{"model":"deepseek","messages":[{"role":"user","content":"Hi"}],"max_tokens":10}' 2>&1)
          echo "Test response: $TEST_RESPONSE"
          echo ""
          echo "Router is ready for Claude Code"
        shell: bash
      
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
        with:
          anthropic_api_key: "any-string-is-ok"
          
          additional_permissions: |
            actions: read
          
          custom_instructions: |
            When you complete all tasks:
            1. Update the GitHub comment ONE TIME with all completed tasks marked as [x]
            2. After receiving a successful response, respond with plain text only (no more tool calls)
            3. Your plain text response should confirm the work is complete
            
            Do not call the same tool multiple times with identical input.
            After a successful comment update with all tasks complete, respond with text only to signal completion.
